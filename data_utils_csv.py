import torch\nimport torchaudio\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset\n\nclass ASVspoofDataset(Dataset):\n    def __init__(self, csv_path, nb_samples=64600):\n        self.df = pd.read_csv(csv_path)\n        self.nb_samples = nb_samples\n        self.label_map = {\"spoof\": 1, \"bonafide\": 0}\n\n    def _load_audio(self, path):\n        waveform, sample_rate = torchaudio.load(path)\n        if waveform.shape[0] > 1:\n            waveform = torch.mean(waveform, dim=0, keepdim=True)\n        if sample_rate != 16000:\n            resampler = torchaudio.transforms.Resample(sample_rate, 16000)\n            waveform = resampler(waveform)\n        if waveform.shape[1] < self.nb_samples:\n            padding = self.nb_samples - waveform.shape[1]\n            waveform = torch.nn.functional.pad(waveform, (0, padding))\n        else:\n            waveform = waveform[:, :self.nb_samples]\n        return waveform\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        row = self.df.iloc[idx]\n        waveform = self._load_audio(row[\"path\"])\n        label = self.label_map[row[\"target\"].lower()]\n        return waveform, torch.tensor(label, dtype=torch.long)\n\ndef get_torchaudio_backend():\n    if torchaudio.get_audio_backend() in [\"sox_io\", \"soundfile\"]:\n        return\n    available_backends = torchaudio.list_audio_backends()\n    for backend in [\"sox_io\", \"soundfile\"]:\n        if backend in available_backends:\n            torchaudio.set_audio_backend(backend)\n            return\n    raise RuntimeError("No suitable audio backend found. Install sox or soundfile.")
